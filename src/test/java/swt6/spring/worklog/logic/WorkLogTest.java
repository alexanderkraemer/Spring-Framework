package swt6.spring.worklog.logic;

import org.junit.*;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import swt6.spring.basics.aop.logic.*;
import swt6.spring.worklog.dao.EmployeeRepository;
import swt6.spring.worklog.dao.ProjectRepository;
import swt6.spring.worklog.domain.*;
import swt6.spring.worklog.domain.Employee;
import swt6.util.JpaUtil;

import javax.persistence.EntityManagerFactory;

import java.sql.Time;
import java.util.Date;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"classpath:/swt6/spring/worklog/test/applicationContext-jdbc.xml"})
@Transactional(transactionManager="transactionManager")
@Rollback
public class WorkLogTest {
    @Autowired
    private WorkLogFacade fc;
    @Autowired
    private EmployeeRepository employeeRepo;
    @Autowired
    private ProjectRepository projectRepo;

    @Before
    public void setUp() throws Exception {

    }

    @After
    public void tearDown() throws Exception {

    }

    @Test
    public void syncEmployee() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        Assert.assertEquals(0, employeeRepo.findAll().size());
        fc.syncEmployee(e);
        Assert.assertEquals(1, employeeRepo.findAll().size());
    }

    @Test
    public void findEmployeeById() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        Assert.assertEquals(0, employeeRepo.findAll().size());
        fc.syncEmployee(e);
        Employee eFind = fc.findEmployeeById(e.getId());
        Assert.assertEquals("Alexander", eFind.getFirstName());
    }

    @Test
    public void findAllEmployees() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        Employee e1 = new Employee("Markus", "Krämer", new Date(18, 6, 1995));
        Employee e2 = new Employee("Daniel", "Krämer", new Date(18, 6, 1995));

        fc.syncEmployee(e);
        fc.syncEmployee(e1);
        fc.syncEmployee(e2);

        Assert.assertEquals(3, fc.findAllEmployees().size());
    }

    @Test
    public void addEmployeeToProject() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        // testdata for this test generated by using the daos directly
        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        fc.addEmployeeToProject(e, p);

        Assert.assertEquals(true, p.getEmployees().contains(e));
    }

    @Test
    public void removeEmployeeFromProject() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);
        // testdata for this test generated by using the daos directly
        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);
        fc.addEmployeeToProject(e, p);
        Assert.assertEquals(true, p.getEmployees().contains(e));

        fc.removeEmployeeFromProject(e, p);
        Assert.assertEquals(false, p.getEmployees().contains(e));
    }


    @Rule
    public final ExpectedException exception = ExpectedException.none();


    @Test
    public void syncIssueException() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);
        Employee e1 = new Employee("Daniel", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e1);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);
        Issue i = new Issue(State.NEW, Priority.NORMAL, null, 0.0, p);

        i.setEmployee(e);
        // exception expected since no estimated time is set
        // write changes
        exception.expect(Exception.class);
        fc.syncIssue(i);
    }

    @Test
    public void syncIssue() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);
        Employee e1 = new Employee("Daniel", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e1);

        Assert.assertNotNull(e.getId());
        Assert.assertNotNull(e1.getId());

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Assert.assertNotNull(p.getId());

        Issue i = new Issue(State.NEW, Priority.NORMAL, null, 0.0, p);

        i.setEstimatedTime(new Time(10, 0, 0));
        i.setEmployee(e);
        // sync again without exception
        fc.syncIssue(i);


        LogbookEntry entry = new LogbookEntry("activity",
                new Date(2017, 20, 10),
                new Date(2017, 12, 20),
                e, new Phase("phase1"), i);
        fc.syncLogbookEntry(entry);
        Assert.assertNotNull(e1.getId());


        i.setEmployee(e1);
        //exception.expect(Exception.class);
        fc.syncIssue(i);

        // write changes but should not be allowed since there is already an logbookentry assigned

    }

    @Test
    public void findAllIssues() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Issue i = new Issue(State.NEW, Priority.NORMAL, new Time(10, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i);

        Issue i1 = new Issue(State.NEW, Priority.NORMAL, new Time(1, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i1);

        Assert.assertEquals(2, fc.findAllIssues().size());
    }

    @Test
    public void findIssueById() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Issue i = new Issue(State.NEW, Priority.NORMAL, new Time(10, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i);

        Assert.assertNotNull(fc.findIssueById(i.getId()));
    }

    @Test
    public void addLogbookEntry() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Issue i = new Issue(State.NEW, Priority.NORMAL, new Time(10, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i);

        LogbookEntry entry = new LogbookEntry("activity",
                new Date(2017, 20, 10),
                new Date(2017, 12, 20),
                e, new Phase("phase1"), i);
        fc.syncLogbookEntry(entry);
        Assert.assertNotNull(entry.getId());

        fc.addLogbookEntry(entry, i);

        Assert.assertNotNull(fc.findLogbookEntriesByEmployeeAndIssue(e, i));
    }

    @Test
    public void syncLogbookEntry() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Issue i = new Issue(State.NEW, Priority.NORMAL, new Time(10, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i);

        LogbookEntry entry = new LogbookEntry("activity",
                new Date(2017, 20, 10),
                new Date(2017, 12, 20),
                e, new Phase("phase1"), i);
        fc.syncLogbookEntry(entry);
        Assert.assertNotNull(entry.getId());
        Assert.assertNotNull(fc.syncLogbookEntry(entry).getId());
    }

    @Test
    public void findLogbookEntryById() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Issue i = new Issue(State.NEW, Priority.NORMAL, new Time(10, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i);

        LogbookEntry entry = new LogbookEntry("activity",
                new Date(2017, 20, 10),
                new Date(2017, 12, 20),
                e, new Phase("phase1"), i);
        fc.syncLogbookEntry(entry);
        Assert.assertNotNull(entry.getId());
        Assert.assertNotNull(fc.findLogbookEntryById(entry.getId()));
    }

    @Test
    public void findAllLogbookEntry() throws Exception {
        Employee e = new Employee("Alexander", "Krämer", new Date(18, 6, 1995));
        fc.syncEmployee(e);

        Project p = new Project("project", e);
        projectRepo.saveAndFlush(p);

        Issue i = new Issue(State.NEW, Priority.NORMAL, new Time(10, 0, 0), 0.0, p);
        i.setEmployee(e);
        fc.syncIssue(i);

        LogbookEntry entry = new LogbookEntry("activity",
                new Date(2017, 20, 10),
                new Date(2017, 12, 20),
                e, new Phase("phase1"), i);

        LogbookEntry entry1 = new LogbookEntry("activity1",
                new Date(2017, 20, 10),
                new Date(2017, 12, 20),
                e, new Phase("phase2"), i);

        fc.syncLogbookEntry(entry);
        fc.syncLogbookEntry(entry1);

        Assert.assertEquals(2, fc.findAllLogbookEntry().size());

    }

}